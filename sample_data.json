[
    {
        "query": "Imports System\n\nModule DataOperationWithDatabase\n\n    MustInherit Class DataOperation\n        Public MustOverride Function PerformOperation(ByVal Input As Integer) As Integer\n    End Class\n\n    Class AdditionOperation\n        Inherits DataOperation\n        Public Overrides Function PerformOperation(ByVal Input As Integer) As Integer\n            Return Input + 10\n        End Function\n    End Class\n\n    Class SubtractionOperation\n        Inherits DataOperation\n        Public Overrides Function PerformOperation(ByVal Input As Integer) As Integer\n            Return Input - 5\n        End Function\n    End Class\n\n    Module DatabaseUpdater\n        Public Sub UpdateDatabase(ByVal OperationName As String, ByVal Input As Integer, ByVal Output As Integer)\n            Console.WriteLine(\"Updating database with operation: \" & OperationName & \", Input: \" & Input & \", Output: \" & Output)\n            ' Code to update the database with the operation details\n        End Sub\n    End Module\n\n    Sub Main()\n        Try\n            Console.WriteLine(\"Welcome to Data Operation Program\")\n\n            ' Input operation type\n            Console.Write(\"Enter operation type (A for Addition, S for Subtraction): \")\n            Dim OperationType As Char = Console.ReadLine().ToUpper()\n\n            ' Input number\n            Console.Write(\"Enter a number: \")\n            Dim InputNumber As Integer = Integer.Parse(Console.ReadLine())\n\n            Dim Operation As DataOperation = Nothing\n\n            ' Perform operation based on user input\n            Select Case OperationType\n                Case \"A\"\n                    Operation = New AdditionOperation()\n                Case \"S\"\n                    Operation = New SubtractionOperation()\n                Case Else\n                    Console.WriteLine(\"Invalid operation type.\")\n                    Exit Sub\n            End Select\n\n            Dim OutputNumber As Integer = Operation.PerformOperation(InputNumber)\n\n            ' Output result to the user\n            Console.WriteLine(\"Result: \" & OutputNumber)\n\n            ' Update database with operation details\n            DatabaseUpdater.UpdateDatabase(OperationType, InputNumber, OutputNumber)\n\n        Catch ex As Exception\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n",
        "current_language": ".NET",
        "target_language": "Python"
    },
    {
        "query": "program DataOperationWithDatabase;\n\n{$APPTYPE CONSOLE}\n\nuses\n  System.SysUtils, System.Classes, Data.DB, Data.SqlExpr, Data.DBXCommon, System.Generics.Collections;\n\ntype\n  TDataOperation = class\n  public\n    class function PerformOperation(const Input: Integer): Integer; virtual; abstract;\n  end;\n\n  TAdditionOperation = class(TDataOperation)\n  public\n    class function PerformOperation(const Input: Integer): Integer; override;\n  end;\n\n  TSubtractionOperation = class(TDataOperation)\n  public\n    class function PerformOperation(const Input: Integer): Integer; override;\n  end;\n\n  TDatabaseUpdater = class\n  public\n    class procedure UpdateDatabase(OperationName: string; Input, Output: Integer);\n  end;\n\n{ TAdditionOperation }\n\nclass function TAdditionOperation.PerformOperation(const Input: Integer): Integer;\nbegin\n  Result := Input + 10;\nend;\n\n{ TSubtractionOperation }\n\nclass function TSubtractionOperation.PerformOperation(const Input: Integer): Integer;\nbegin\n  Result := Input - 5;\nend;\n\n{ TDatabaseUpdater }\n\nclass procedure TDatabaseUpdater.UpdateDatabase(OperationName: string; Input, Output: Integer);\nbegin\n  Writeln('Updating database with operation:', OperationName, ', Input:', Input, ', Output:', Output);\n  // Code to update the database with the operation details\nend;\n\nvar\n  InputNumber: Integer;\n  OperationType: Char;\n  OutputNumber: Integer;\n  Operation: TDataOperation;\nbegin\n  try\n    Writeln('Welcome to Data Operation Program');\n\n    // Input operation type\n    Write('Enter operation type (A for Addition, S for Subtraction): ');\n    Readln(OperationType);\n\n    // Input number\n    Write('Enter a number: ');\n    Readln(InputNumber);\n\n    // Perform operation based on user input\n    case OperationType of\n      'A': Operation := TAdditionOperation.Create;\n      'S': Operation := TSubtractionOperation.Create;\n    else\n      begin\n        Writeln('Invalid operation type.');\n        Exit;\n      end;\n    end;\n\n    OutputNumber := Operation.PerformOperation(InputNumber);\n\n    // Output result to the user\n    Writeln('Result:', OutputNumber);\n\n    // Update database with operation details\n    TDatabaseUpdater.UpdateDatabase(OperationType, InputNumber, OutputNumber);\n\n    // Clean up\n    Operation.Free;\n  except\n    on E: Exception do\n      Writeln('Error:', E.ClassName, ':', E.Message);\n  end;\nend.",
        "current_language": "Delphi",
        "target_language": "Python"
    },
    {
        "query": "program DataOperationWithDatabase;{$APPTYPE CONSOLE}uses System.SysUtils, System.Classes, Data.DB, Data.SqlExpr, Data.DBXCommon, System.Generics.Collections;type TDataOperation = class public class function PerformOperation(const Input: Integer): Integer; virtual; abstract; end; TAdditionOperation = class(TDataOperation) public class function PerformOperation(const Input: Integer): Integer; override; end; TSubtractionOperation = class(TDataOperation) public class function PerformOperation(const Input: Integer): Integer; override; end; TDatabaseUpdater = class public class procedure UpdateDatabase(OperationName: string; Input, Output: Integer); end;{ TAdditionOperation }class function TAdditionOperation.PerformOperation(const Input: Integer): Integer;begin Result := Input + 10;end;{ TSubtractionOperation }class function TSubtractionOperation.PerformOperation(const Input: Integer): Integer;begin Result := Input - 5;end;{ TDatabaseUpdater }class procedure TDatabaseUpdater.UpdateDatabase(OperationName: string; Input, Output: Integer);begin Writeln('Updating database with operation:', OperationName, ', Input:', Input, ', Output:', Output); // Code to update the database with the operation details end;var InputNumber: Integer; OperationType: Char; OutputNumber: Integer; Operation: TDataOperation;begin try Writeln('Welcome to Data Operation Program'); // Input operation type Write('Enter operation type (A for Addition, S for Subtraction): '); Readln(OperationType); // Input number Write('Enter a number: '); Readln(InputNumber); // Perform operation based on user input case OperationType of 'A': Operation := TAdditionOperation.Create; 'S': Operation := TSubtractionOperation.Create; else begin Writeln('Invalid operation type.'); Exit; end; end; OutputNumber := Operation.PerformOperation(InputNumber); // Output result to the user Writeln('Result:', OutputNumber); // Update database with operation details TDatabaseUpdater.UpdateDatabase(OperationType, InputNumber, OutputNumber); // Clean up Operation.Free;except on E: Exception do Writeln('Error:', E.ClassName, ':', E.Message); end;end.",
        "current_language": "Delphi"
    }
]